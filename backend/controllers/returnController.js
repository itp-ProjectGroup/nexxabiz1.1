import Return from '../models/Return.js';

// Get all returns
export const getReturns = async (req, res) => {
  try {
    const returns = await Return.find().sort({ createdAt: -1 });
    res.status(200).json(returns);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching returns', error: error.message });
  }
};

// Get return by ret_Id
export const getReturnByID = async (req, res) => {
  const { id } = req.params;
  try {
    const ret = await Return.findOne({ ret_Id: id });
    if (!ret) {
      return res.status(404).json({ message: `Return with ID ${id} not found` });
    }
    res.status(200).json(ret);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching return', error: error.message });
  }
};

// Create a new return
export const createReturn = async (req, res) => {
  try {
    const { ret_date, userID, pay_status, od_items } = req.body;

    // Validate required fields
    if (!ret_date || !userID || !od_items || !Array.isArray(od_items) || od_items.length === 0) {
      return res.status(400).json({ message: 'Missing required fields: ret_date, userID, and od_items are required' });
    }

    // Validate od_items structure
    const isValidItems = od_items.every(item => item.manufacturingID && typeof item.qty === 'number' && item.qty > 0);
    if (!isValidItems) {
      return res.status(400).json({ message: 'Invalid od_items: each item must have a valid manufacturingID and positive qty' });
    }

    // Create new return
    const newReturn = new Return({
      ret_date,
      userID,
      pay_status: pay_status || 'Return', // Default to 'Return' if not provided
      od_items
    });

    // Save to database (ret_Id will be auto-generated by the schema's pre-save hook)
    await newReturn.save();

    res.status(201).json(newReturn);
  } catch (error) {
    res.status(500).json({ message: 'Error creating return', error: error.message });
  }
};